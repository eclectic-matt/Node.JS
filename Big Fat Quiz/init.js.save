'use strict';

/**
 * INFORMATION
 * The Codenames Bot which handles games of codenames via Discord text chat
 * Now split into modules for easier updating and standardisation
 * Includes better logging and clear tools for development
**/

/**
  * Node Imports
**/
const http = require('http');

//USE os MODULE TO GET LOCAL IP (SOURCE: https://stackoverflow.com/questions/3653065/get-local-ip-address-in-node-js)
const { networkInterfaces } = require('os');
const qs = require('querystring');
const fs = require('fs');

/**
 * Local imports
 */
//PAGES
const page_join = require('./pages/join.js');
const page_template_head = `<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width, initial-scale=1" />`;

const QuizGame = require('./classes/QuizGame.js');
let gameSetup = {
	name: 'Big Fat Quiz',
	teams: [],
	canvases : []
}
let game = new QuizGame(gameSetup);

/**
 * Host / IP Setup.
 */
//GET NETWORK INTERFACES TO ESTABLISH LOCAL IP
const nets = networkInterfaces();
const results = Object.create(null); // Or just '{}', an empty object

for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
        // Skip over non-IPv4 and internal (i.e. 127.0.0.1) addresses
        // 'IPv4' is in Node <= 17, from 18 it's a number 4 or 6
        const familyV4Value = typeof net.family === 'string' ? 'IPv4' : 4
        if (net.family === familyV4Value && !net.internal) {
            if (!results[name]) {
                results[name] = [];
            }
            results[name].push(net.address);
        }
    }
}

var hostname = '0.0.0.0';
if(results.wlan0){
  hostname = results.wlan0;
}


const json_store = (file, data) => {
  const fs = require('node:fs');

const content = 'Some content!';

fs.writeFile('/Users/joe/test.txt', content, err => {
  if (err) {
    console.error(err);
  } else {
    // file written successfully
  }
});

}

/*
  HANDLE POST DATA - triggered within http.createServer()
*/
//https://stackoverflow.com/questions/4295782/how-to-process-post-data-in-node-js
//Reference: https://nodejs.org/en/learn/modules/anatomy-of-an-http-transaction
const handlePostData = (req) => {

  //var body = '';
  var output = '';
  var body = [];
  req
    //HANDLE ERROR
    .on('error', err => {
      console.error(err);
    })
    //HANDLE PARTIAL DATA RECEIVED
    .on('data', chunk => {
      body.push(chunk);
    })
    //HANDLE END OF DATA RECEIVED
    .on('end', () => {
      body = Buffer.concat(body).toString();
      // at this point, `body` has the entire request body stored in it as a string

      const post = qs.parse(body);
      const newTeamName = decodeURI(post.teamName);
      console.log('TEAM NAME:' + newTeamName);
      output = 'DATA RECEIVED: ' + newTeamName;
      let teamAddResult = game.addTeam(newTeamName);
      if(teamAddResult){
        output = 'TEAM ADDED';
	//BACKUP TO TEAMS JSON
	json_store(file, jsonObj);
      }else{
        output = 'TEAM ALREADY FOUND';
      }
    });

  return output;
}



/*
  HANDLE GET REQUESTS - triggered within http.createServer()
*/
const handleGet = (req) => {
  //IGNORE SEPARATE BROWSER REQUESTS FOR THE favicon
  if(req.url === '/favicon.ico') return false;

  //INIT OUTPUT
  var output = '';

  //SPLIT REQUEST URL
  let [page, query] = req.url.substr(1).split('?');
  
  //SWITCH ON PAGE
  switch(page){
    case 'test':
      console.log('Outputting TEST');
      //return '<h1>TEST PAGE REQUESTED!</h1>';
      output = '<h1>TEST PAGE REQUESTED!</h1>';
    break;
    case 'join':
    default:
      console.log('Outputting JOIN');
      //output = '<h1>JOIN THE BIG FAT QUIZ!</h1>';
      //return page_join;
      output = page_join;
    break;
  }
  return output;
}



/**
  * HTTP module setup (needed for Heroku)
**/
//const hostname = '0.0.0.0';
const port = process.env.PORT || 3000;

const server = http.createServer((req, res) => {

  //SET COMMON HEADERS (CAN BE OVERWRITTEN LATER)
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Powered-By', 'RasPi and NodeJS');

  //INIT OUTPUT STRING
  var output = page_template_head;
  output += '<style>label { font-size: 2em; } input { font-size: 2em; } button { float: clear; font-size: 2em; } </style>';
  output += '</head><body>';

  //POST REQUEST?
  if (req.method === 'POST') {
    //PASS POST REQUEST TO THE HANDLER
    //output = handlePostData(req);
    //handlePostData OPERATES ASYNCHRONOUSLY
    handlePostData(req);
    output = 'POST DATA RECEIVED!';
  } else {
    //PASS GET REQUEST TO THE HANDLER
    output = handleGet(req);
  }

  //IF NO OUTPUT WAS FOUND
  if(!output){
    //WRITE ERROR - ELSE PAGE HANGS ENDLESSLY
    res.writeHead(500, {'Content-Type' : 'text/plain'});
    res.write('Application Error');
    res.end();
    return false;
  }
  
  //OUTPUT JUST THE STRING output VARIABLE
  //res.writeHead(200, {'Content-Type': 'text/html'});
  res.writeHead(200, {
    'Content-Type': 'text/html',
    'X-Powered-By': 'RasPi and NodeJS',
  });
  res.write(output);
  res.end();
  
});

server.listen(port, hostname, () => {
	console.log(`Server running at http://${hostname}:${port}/`);
});


/**
  * Then import the class for the Codenames game itself
**/
const Server = require('./classes/Server.js');

server.on('message', message => {
  console.log('MESSAGE RECEIVED:',message);
});

