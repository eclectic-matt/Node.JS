#!/usr/bin/env node
'use strict';

/**
 * INFORMATION
 * Quiz Game architecture - with view / join / admin panels.
 * VIEW - is the TV screen display, updated by the quiz master (via ADMIN).
 * JOIN - enter a team name and then have the quiz answering options.
 * ADMIN - changes the display of VIEW and locks in answers from JOINed teams.
**/

/**
  * Node Imports
**/
const http = require('http');

//USE os MODULE TO GET LOCAL IP (SOURCE: https://stackoverflow.com/questions/3653065/get-local-ip-address-in-node-js)
const { networkInterfaces } = require('os');
const qs = require('querystring');
const fs = require('node:fs');

/**
 * Local imports
 */
//PAGES
const page_join = require('./pages/join.js');
const page_view = require('./pages/view.js');
const page_canvas = require('./pages/canvas.js');
const page_admin = require('./pages/admin.js');
const page_template_head = `<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width, initial-scale=1" />`;

const QuizGame = require('./classes/QuizGame.js');

/**
 * Game Class Setup
 */

//GET TEAMS JSON AND LOAD IT - MANUALLY CLEAR THIS USING THE ADMIN PANEL 
const teamsJson = fs.readFileSync('./data/teams.json', 'utf8');
let gameSetup = {
	name: 'Big Fat Quiz',
	teams: JSON.parse(teamsJson),
	canvases : []
}
let game = new QuizGame(gameSetup);

/**
 * Host / IP Setup.
 */
//GET NETWORK INTERFACES TO ESTABLISH LOCAL IP
const nets = networkInterfaces();
const results = Object.create(null); // Or just '{}', an empty object

for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
        // Skip over non-IPv4 and internal (i.e. 127.0.0.1) addresses
        // 'IPv4' is in Node <= 17, from 18 it's a number 4 or 6
        const familyV4Value = typeof net.family === 'string' ? 'IPv4' : 4
        if (net.family === familyV4Value && !net.internal) {
            if (!results[name]) {
                results[name] = [];
            }
            results[name].push(net.address);
        }
    }
}

var hostname = '0.0.0.0';
if(results.wlan0){
  hostname = results.wlan0;
}


const storeJson = (path, data) => {
  fs.writeFile(path, JSON.stringify(data), err => {
    if (err) {
      console.error(err);
    } else {
      // file written successfully
      console.log('File updated', path);
    }
  });
}

/*
  HANDLE POST DATA - triggered within http.createServer()
*/
//https://stackoverflow.com/questions/4295782/how-to-process-post-data-in-node-js
//Reference: https://nodejs.org/en/learn/modules/anatomy-of-an-http-transaction
const handlePostData = (req) => {

  //var body = '';
  var output = '';
  var body = [];
  req
    //HANDLE ERROR
    .on('error', err => {
      console.error(err);
    })
    //HANDLE PARTIAL DATA RECEIVED
    .on('data', chunk => {
      body.push(chunk);
    })
    //HANDLE END OF DATA RECEIVED
    .on('end', () => {
			// at this point, `body` has the entire request body stored in it as a string      
			body = Buffer.concat(body).toString();
			//USE querystring TO PARSE name=this REQUEST DATA
      const post = qs.parse(body);
			if(post.teamName !== undefined){
				//TEAM NAME REQUEST
				//ALL DATA WILL BE URI-ENCODED, SO DECODE ON THIS END
      	const newTeamName = decodeURI(post.teamName);
      	console.log('TEAM NAME:' + newTeamName);
      	output += 'DATA RECEIVED: ' + newTeamName;
      	let teamAddResult = game.addTeam(newTeamName);
      	if(teamAddResult){
        	output += 'TEAM ADDED';
        	storeJson('./data/teams.json', game.getTeams());
      	}else{
        	output += 'TEAM ALREADY FOUND';
        	//storeJson('/data/teams.json', this.teams);
      	}
			}else if(post.admin !== undefined){

				//==================================
				// ADMIN POST UPDATES
				//==================================

				//console.log('ADMIN POST RECEIVED', post);

				Object.keys(post).forEach( (k) => {
					const [key, teamId] = k.split('_');
					switch(key){
						case 'admin':
						default:
							//IGNORE
						break;
						case 'team':
								//HANDLE TEAM NAME UPDATE
								console.log('Updating team name', teamId, post[k]);
								game.updateTeam(teamId, 'name', post[k]);
						break;
						case 'score':
							//HANDLE TEAM SCORE UPDATE
							console.log('Updating team score', teamId, post[k]);
							game.updateTeam(teamId, 'score', post[k]);
						break;
						case 'reveal':
							if(post[k] !== 'on') break;
							//HANDLE TEAM ANSWER REVEAL (CURRENT ROUND / QUESTION ASSUMED!)
							console.log('Revealing team answer', teamId, post[k]);
							game.updateTeam(teamId, 'reveal', post[k]);
						break;
						case 'delete':
							//DELETE TEAM 
							console.log('Deleting team', teamId, post[k]);
							//SAFETY CHECK - IGNORE IF NOT "on"
							if(post[k] !== 'on') break;
							//DELETE TEAM
							game.deleteTeam(post['team_' + teamId]);
						break;
					}
				});

				game.storeJson();
			}

    });

  return output;
}

const getDateNow = () => {
	const date = new Date();
	return new Intl.DateTimeFormat('en-GB', {
    dateStyle: 'full',
    timeStyle: 'long',
    timeZone: 'Europe/London',
  }).format(date);
}


/*
  HANDLE GET REQUESTS - triggered within http.createServer()
*/
const handleGet = (req) => {
  //IGNORE SEPARATE BROWSER REQUESTS FOR THE favicon
  if(req.url === '/favicon.ico') return false;

  //INIT OUTPUT
  var output = '';

  //SPLIT REQUEST URL
  let [page, query] = req.url.substr(1).split('?');
	
	//POLLED CONSTANTLY, DO NOT LOG
	if( (page !== 'data/teams.json') && (page !== 'view') ){
		//LOG DATE,GET,view.js etc
  	console.log(getDateNow(),'GET',page);
	}

  //SWITCH ON PAGE
  switch(page){

		//============
		//PAGES
		//============
    case 'test':
      output = '<h1>TEST PAGE REQUESTED!</h1>';
    break;
    case 'admin':
      output = page_admin;
    break;
    case 'view':
      output += page_template_head;
      output += page_view;
    break;

		//============
		// JSON, JS, CSS FILES
		//============
    case 'data/teams.json':
      output = fs.readFileSync('./data/teams.json', 'utf8');
    break;
		case 'data/admin.json':
      output = fs.readFileSync('./data/admin.json', 'utf8');
    break;
		case 'js/init.js':
			 output = fs.readFileSync('./pages/js/init.js', 'utf8');
		break;
    case 'style/canvas.css':
			 output = fs.readFileSync('./pages/style/canvas.css', 'utf8');
		break;
		case 'resource/QRjoin.PNG':
			//output = fs.readFileSync('./pages/resource/QRjoin.PNG', 'utf8');
			//output = "data:image/png;base64," + output.toString('base64');
		break;

		//============
		//DEFAULT
		//============
	  case 'join':
    default:
      output += page_template_head;
      output += page_join;
    break;
  }


  return output;
}



/**
  * HTTP module setup (needed for Heroku)
**/
//const hostname = '0.0.0.0';
const port = process.env.PORT || 3000;

const server = http.createServer((req, res) => {

	let contentType = 'text/html';
  //SET COMMON HEADERS (CAN BE OVERWRITTEN LATER)
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Powered-By', 'RasPi and NodeJS');

  //INIT OUTPUT STRING
  var output = page_template_head;
  output += '<style>label { font-size: 2em; } input { font-size: 2em; } button { float: clear; font-size: 2em; } </style>';
  //output += '</head><body>';

  //POST REQUEST?
  if (req.method === 'POST') {
    //PASS POST REQUEST TO THE HANDLER - handlePostData OPERATES ASYNCHRONOUSLY
    handlePostData(req);
		if(req.url === '/join'){
			//DEFAULT TO THE CANVAS OUTPUT
    	output += page_canvas;
		}else if(req.url === '/admin'){
			output += page_admin;
		}
  } else {

		if(req.url.endsWith('.PNG')){
			const imagePath = './pages/resource/QRjoin.PNG';
			var stat = fs.statSync(imagePath);
			res.setHeader('Content-Type','image/png');
			res.setHeader('Content-Length', stat.size);
			contentType = 'image/png';
			//res.sendFile();
		}
    //PASS GET REQUEST TO THE HANDLER
    output = handleGet(req);
  }

  //IF NO OUTPUT WAS FOUND
  if(!output){
    //WRITE ERROR - ELSE PAGE HANGS ENDLESSLY
    res.writeHead(500, {'Content-Type' : 'text/plain'});
    res.write('Application Error');
    res.end();
    return false;
  }
  
  //OUTPUT JUST THE STRING output VARIABLE
  res.end(output);
  
});

server.listen(port, hostname, () => {
	console.log(getDateNow(),`Server running at http://${hostname}:${port}/`);
});


/**
  * Then import the class for the Codenames game itself
**/
const Server = require('./classes/Server.js');

server.on('message', message => {
  console.log('MESSAGE RECEIVED:',message);
});

