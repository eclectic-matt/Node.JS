//THIS PANEL STORES THE SETTINGS FOR THE GAME IN data/admin.json


//LOAD CURRENT SETTINGS
const adminJson = fs.readFileSync('./data/admin.json', 'utf8');
var admin = JSON.parse(adminJson);


module.exports = `
<h1>Super Secret</h1>

<div id="login">
	Enter Password: <input type="text" id="pass" name="pass" value="" />
</div>

<div id="controls" style="display: none;">
	<h2>Current Round: <span id="currentRound">1</span></h2>
	<h3>Current Q: <span id="currentQuestion">1</span></h3>
	<h4>Current Team: <span id="currentTeam">1</span></h4>
	<br>
	<label for="round">Select Round: </label>
	<input value="1" name="round" type="number">
	<br>
	<label for="question">Select Question: </label>
	<input value="1" name="question" type="number">
	<br>
	<label for="team">Select Team: </label>
	<input value="1" name="team" type="number">
	<br>	<br>
	<button id="nextTeam" onclick="nextTeam()">Next Team</button>
	<button id="nextQuestion" onclick="nextQuestion()">Next Question</button>
	<button id="nextRound" onclick="nextRound()">Next Round</button>
</div>

<script>
var admin = undefined;
//LOAD JSON
const init = () => {
  loadAdminData();
}

const loadAdminData = () => {
  fetch('../data/admin.json, (err) => {

  }).then((content) => {

  });


fetch('./data/teams.json')
    .then(response => {
      if (!response.ok) {
        teamList.innerHTML = 'Network Response Error!';                                               throw new Error('Network response was not ok'); 
      }
      return response.json();
    }) 
    .then(data => {                                                                                 data.forEach( (team) => {                                                                                               //ONLY ADD IF TEAM DOES NOT CURRENTLY EXIST AS A LI                                           if(!document.getElementById(team.name)){                                                              //ADD WITH THE ID OF THE TEAM                                         let teamLi = document.createElement('li');                                                                            teamLi.id = team.name;                                                teamLi.innerHTML = team.name;                                                                 teamList.appendChild(teamLi);                                                                                 }                                                                   
    });





}
	var currentTeam = 0;
	var currentRound = 0;
	var currentQuestion = 0;
	var teamsCount = 1;
	var roundsCount = 5;
	var questionsThisRound = 10;
	let passEl = document.getElementById('pass');
	passEl.addEventListener('change', (ev) => {
		if(ev.target.value === 'fuckeroo'){
			//HIDE LOGIN,  SHOW CONTROLS
			document.getElementById('login').style.display = 'none';
			document.getElementById('controls').style.display = 'block';
		}
	});
	const updateTeam = () => {
		document.getElementById('currentTeam').innerHTML = currentTeam;
	}
	const nextTeam = () => {
		currentTeam++;
		if(currentTeam > teamsCount){
			currentTeam = 0;
		}
		updateTeam();
	}
	const updateRound = () => {
		document.getElementById('currentRound').innerHTML = currentRound;
	}
	const nextRound = () => {
		currentRound++;
		if(currentRound > roundsCount){
			currentRound = 0;
		}
		updateRound();
	}
	const updateQuestion = () => {
		document.getElementById('currentQuestion').innerHTML = currentQuestion;
	}
	const nextQuestion = () => {
		currentQuestion++;
		if(currentQuestion > questionsThisRound){
			currentQuestion = 0;
		}
		updateQuestion();
	}

	updateTeam();
	updateRound();
	updateQuestion();
</script>
`;
